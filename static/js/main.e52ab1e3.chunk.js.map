{"version":3,"sources":["components/CrudForm/CrudForm.js","components/CrudList/CrudList.js","App.js","serviceWorker.js","index.js"],"names":["CrudForm","props","onSubmit","addCourse","type","name","value","current","onChange","updateCourse","CrudList","state","isEdit","renderCourse","details","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Component","App","courses","target","push","splice","courseList","length","map","course","key","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAceA,EAXC,SAACC,GAGf,OACE,0BAAMC,SAAUD,EAAME,WAC1B,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,MAAOL,EAAMM,QAASC,SAAUP,EAAMQ,eACrE,4BAAQL,KAAK,UAAb,gBCmCeM,E,4MAzCXC,MAAQ,CACJC,QAAO,G,EAEXC,aAAe,WACX,OACI,gCAAK,8BAAO,EAAKZ,MAAMa,QAAQT,MAC/B,4BAAQU,QAAS,WAAK,EAAKC,gBAA3B,gBACA,4BAAQD,QAAS,WAAO,EAAKd,MAAMgB,aAAa,EAAKhB,MAAMiB,SAA3D,c,EAIRF,YAAc,WAAM,IACXJ,EAAS,EAAKD,MAAdC,OACL,EAAKO,SAAS,CACVP,QAASA,K,EAGjBQ,iBAAiB,SAACC,GACdA,EAAEC,iBACF,EAAKrB,MAAMsB,WAAW,EAAKtB,MAAMiB,MAAM,EAAKM,MAAMlB,OAClD,EAAKU,e,EAETS,iBAAmB,WACf,OACI,0BAAMvB,SAAU,EAAKkB,kBACjB,2BAAOhB,KAAK,OAAOsB,IAAK,SAACC,GAAM,EAAKH,MAAMG,GAAIC,aAAc,EAAK3B,MAAMa,QAAQT,OAC/E,mD,uDAKP,IACFO,EAAQiB,KAAKlB,MAAbC,OACL,OACE,kBAAC,WAAD,KACKA,EAASiB,KAAKJ,mBAAmBI,KAAKhB,oB,GApCxBiB,aC2ERC,E,4MAxEbpB,MAAO,CACLqB,QAAQ,CACN,CAAC3B,KAAK,QACN,CAACA,KAAK,OACN,CAACA,KAAK,cACN,CAACA,KAAK,WAGRE,QAAU,I,EAGZE,aAAc,SAACY,GACb,EAAKF,SAAS,CACZZ,QAAQc,EAAEY,OAAO3B,S,EAIrBH,UAAU,SAACkB,GACTA,EAAEC,iBACF,IAAIf,EAAU,EAAKI,MAAMJ,QACrByB,EAAU,EAAKrB,MAAMqB,QACzB,GAA0B,KAAvBX,EAAEY,OAAO5B,KAAKC,MACf,OAAO,EAGT0B,EAAQE,KAAK,CAAC7B,KAAKE,IACnB,EAAKY,SAAS,CACZa,UACAzB,QAAQ,M,EAIZU,aAAc,SAACC,GAEb,IAAIc,EAAU,EAAKrB,MAAMqB,QACzBA,EAAQG,OAAOjB,EAAM,GACrB,EAAKC,SAAS,CACZa,a,EAGJT,WAAa,SAACL,EAAMZ,GAClB,IAAI0B,EAAU,EAAKrB,MAAMqB,QACZA,EAAQd,GACf,KAAWZ,EACjB,EAAKa,SAAS,CACZa,a,uDAIG,IAAD,OACCA,EAASH,KAAKlB,MAAdqB,QAEDI,EADKJ,EAAQK,OACSL,EAAQM,KAAI,SAACC,EAAOrB,GAC9C,OACE,kBAAC,EAAD,CAAUJ,QAASyB,EAAQC,IAAKtB,EAAOA,MAAOA,EAAOD,aAAc,EAAKA,aAAcM,WAAY,EAAKA,gBAI3G,0DAGA,OAEE,6BAASkB,UAAU,OACpB,0CACA,kBAAC,EAAD,CAAUlC,QAAUsB,KAAKlB,MAAMJ,QAASE,aAAcoB,KAAKpB,aAAcN,UAAW0B,KAAK1B,YAC1F,4BAAKiC,Q,GAnEWN,aCQEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e52ab1e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst CrudForm =(props)=> {\r\n  \r\n  \r\n  return (\r\n    <form onSubmit={props.addCourse}>\r\n<input type=\"text\" name=\"name\" value={props.current} onChange={props.updateCourse}/>\r\n<button type=\"submit\">Add Course</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CrudForm;\r\n","import React,{Component, Fragment} from 'react';\r\n\r\nclass CrudList extends Component {\r\n    state = {\r\n        isEdit:false\r\n    }\r\n    renderCourse = ()=>{\r\n        return(\r\n            <li> <span>{this.props.details.name}</span> \r\n            <button onClick={()=>{this.toggleState()}}> Edit Course</button>\r\n            <button onClick={() => {this.props.deleteCourse(this.props.index)}} >  Delete</button></li>\r\n\r\n        )\r\n    }\r\n    toggleState = () =>{\r\n        let {isEdit} =this.state;\r\n        this.setState({\r\n            isEdit :!isEdit\r\n        })\r\n    }\r\n    updateCourseItem=(e)=>{\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index,this.input.value);\r\n        this.toggleState();\r\n    }\r\n    renderUpdateForm = ()=>{\r\n        return(\r\n            <form onSubmit={this.updateCourseItem}>\r\n                <input type=\"text\" ref={(v) =>{this.input=v}} defaultValue={this.props.details.name}/>\r\n                <button>Update Course</button>\r\n            </form>\r\n\r\n        )\r\n    }\r\nrender(){\r\n  let {isEdit}=this.state;\r\n  return (\r\n    <Fragment >\r\n        {isEdit ? this.renderUpdateForm():this.renderCourse()}\r\n    </Fragment>\r\n  );\r\n}\r\n}\r\n\r\nexport default CrudList;\r\n","import React,{Component} from 'react';\nimport CrudForm from './components/CrudForm/CrudForm';\nimport CrudList from './components/CrudList/CrudList'\n\nclass App extends Component {\n  state ={\n    courses:[\n      {name:\"Html\"},\n      {name:\"CSS\"},\n      {name:\"JavaScript\"},\n      {name:\"Jquery\"}\n\n    ],\n    current : ''\n  }\n  \n  updateCourse =(e)=>{\n    this.setState({\n      current:e.target.value\n    })\n  \n  }\n  addCourse=(e)=>{\n    e.preventDefault();\n    let current = this.state.current;\n    let courses = this.state.courses;\n    if(e.target.name.value ==='') {\n      return false;\n      \n    }else{\n    courses.push({name:current});\n    this.setState({\n      courses,\n      current:''\n    })\n  }\n  }\n  deleteCourse =(index)=>{\n    // console.log(index);\n    let courses = this.state.courses;\n    courses.splice(index,1);\n    this.setState({\n      courses\n    })\n  }\n  editCourse = (index,value )=>{\n    let courses = this.state.courses;\n    let course = courses[index];\n    course['name'] = value;\n    this.setState({\n      courses\n    })\n\n  }\nrender(){\n  const {courses}=this.state;\n  let length=courses.length;\n  const courseList= length ? (courses.map((course,index) =>{\n    return (\n      <CrudList details={course} key={index} index={index} deleteCourse={this.deleteCourse} editCourse={this.editCourse}/>\n    )\n  })\n):(\n  <p>There is no courses to show</p>\n)\n\n  return (\n   \n    <section className=\"App\">\n   <h2>Add Course</h2>\n   <CrudForm current ={this.state.current} updateCourse={this.updateCourse} addCourse={this.addCourse}/>\n  <ul>{courseList}</ul>\n    </section>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}